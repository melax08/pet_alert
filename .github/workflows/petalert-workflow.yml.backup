name: pet-alert workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.13

      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: "2.0.1"

      - name: Install dependencies
        run: |
          poetry install

      - name: Test with Ruff
        run: |
          poetry run ruff check .

      - name: Test with django unittest
        run: |
          cat <<EOF > config/.env
          DJANGO_ENV=development
          EOF
          poetry run python manage.py test -v 2


  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script : |
            cd pet_alert
            git pull
            cd infra
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose stop
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose rm -sf pet-alert-backend pet-alert-worker pet-alert-nginx
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker volume rm infra_static_volume
            cat <<EOF > ../.env
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET }}
            DJANGO_ENV=production
            WEBSITE_HOST=pet-alert.ru
            TZ=Europe/Moscow

            # Database settings
            POSTGRES_DB=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            DJANGO_DATABASE_HOST=${{ secrets.DB_HOST }}
            DJANGO_DATABASE_PORT=${{ secrets.DB_PORT }}

            # ReCaptcha settings
            RECAPTCHA_PUBLIC_KEY=${{ secrets.RECAPTCHA_PUBLIC_KEY }}
            RECAPTCHA_PRIVATE_KEY=${{ secrets.RECAPTCHA_PRIVATE_KEY }}
            RECAPTCHA_REQUIRED_SCORE=${{ secrets.RECAPTCHA_REQUIRED_SCORE }}

            # SMTP settings
            DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
            EMAIL_HOST=${{ secrets.SMTP_HOST }}
            EMAIL_USE_TLS=0
            EMAIL_PORT=465
            EMAIL_USE_SSL=1
            EMAIL_HOST_USER=${{ secrets.SMTP_USER }}
            EMAIL_HOST_PASSWORD=${{ secrets.SMTP_PASSWORD }}

            # Yandex maps API Keys
            YA_MAPS_API_KEY=${{ secrets.YA_MAPS_API_KEY }}
            YA_MAPS_SUGGEST_API_KEY=${{ secrets.YA_MAPS_SUGGEST_API_KEY }}

            # Redis
            REDIS_SSL=0
            REDIS_PREFIX=pet-alert
            REDIS_HOST=pet-alert-redis
            REDIS_PORT=6379
            REDIS_DB=0

            # Sentry
            SENTRY_DSN=

            # Telegram settings
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            # DONE WORKFLOW ENVS
            EOF
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose -f infra/docker-compose-prod.yml --env-file config/.env up -d --build pet-alert-backend pet-alert-worker pet-alert-nginx


  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_DEPLOY_TO }}
          token: ${{ secrets.TELEGRAM_DEPLOY_TOKEN }}
          message: üòΩ ${{ github.workflow }} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!
