name: pet-alert workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r pet_alert/requirements.txt

      - name: Test with django unittest
        run: |
          cd pet_alert/
          cat <<EOF > pet_alert/.env
          LOCAL=1
          DJANGO_DEBUG=1
          RECAPTCHA_PUBLIC_KEY=${{ secrets.RECAPTCHA_DEV_PUBLIC_KEY }}
          RECAPTCHA_PRIVATE_KEY=${{ secrets.RECAPTCHA_DEV_PRIVATE_KEY }}
          EOF
          python manage.py test -v 2
          

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script : |
            cd pet_alert
            git pull
            cd infra
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose stop
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose rm -sf web nginx
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker volume rm infra_static_volume
            cat <<EOF > .env
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET }}
            DJANGO_DEBUG=0
            DJANGO_ALLOWED_HOSTS=127.0.0.1 localhost pet-alert.ru testserver
            TIMEZONE=Europe/Moscow
            DB_ENGINE=django.db.backends.postgresql
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            # Yandex maps API Keys
            YA_MAPS_API_KEY=${{ secrets.YA_MAPS_API_KEY }}
            YA_MAPS_SUGGEST_API_KEY=${{ secrets.YA_MAPS_SUGGEST_API_KEY }}
            # ReCaptcha settings
            RECAPTCHA_PUBLIC_KEY=${{ secrets.RECAPTCHA_PUBLIC_KEY }}
            RECAPTCHA_PRIVATE_KEY=${{ secrets.RECAPTCHA_PRIVATE_KEY }}
            RECAPTCHA_REQUIRED_SCORE=${{ secrets.RECAPTCHA_REQUIRED_SCORE }}
            # SMTP settings
            DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}
            EMAIL_HOST=${{ secrets.SMTP_HOST }}
            EMAIL_USE_TLS=0
            EMAIL_PORT=465
            EMAIL_USE_SSL=1
            EMAIL_HOST_USER=${{ secrets.SMTP_USER }}
            EMAIL_HOST_PASSWORD=${{ secrets.SMTP_PASSWORD }}
            # DONE WORKFLOW ENVS
            EOF
             echo "${{ secrets.SUDO_PASS }}" | sudo -S docker compose up -d --build web nginx


  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!